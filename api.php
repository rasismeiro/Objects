<?php//Ã© utf-8/* * @package API * @author Ricardo Alexandre Sismeiro <ricardo@sismeiro.com> * @version 1.0.0 * @copyright Copyright (c) 2011, Ricardo Alexandre Sismeiro. * @license http://www.gnu.org/licenses/gpl.txt GNU GENERAL PUBLIC LICENSE * @link http://www.sismeiro.com/2011/02/design-pattern-singleton-overload-strategy/  */class Api{  private static $instance;  public static function plugin($obj='')  {    $class = __CLASS__;    if (!self::$instance) {      self::$instance = new $class;    }    if (!is_array($obj)) {      $obj = array($obj);    }    foreach ($obj as $key => $value) {      if (is_numeric($key)) {        if (is_string($value)) {          if (!isset(self::$instance->$value)) {            self::$instance->$value = $value;          }        } elseif (is_object($value)) {          $class = get_class($value);          if (!isset(self::$instance->$class)) {            self::$instance->$class = $value;          }        }      } else {        if (!isset(self::$instance->$key)) {          self::$instance->$key = $value;        }      }    }    return self::$instance;  }  public function __set($name, $value)  {    if (is_string($value) && class_exists($value)) {      $this->$name = new $value();    } else {      $this->$name = $value;    }    return $this->$name;  }  public function __get($name)  {    if (!isset($this->$name)) {      if (class_exists($name)) {        $this->$name = new $name();        return $this->$name;      } else {        return false;      }    } else {      return $this->$name;    }  }  public function __call($name, $arguments)  {    if (!method_exists($this, $name) && !isset($this->$name)) {      if (class_exists($name)) {        if (!empty($arguments)) {          $arg = '';          foreach ($arguments as $k => $var) {            $k = 'v' . $k;            $$k = $var;            $arg.='$' . $k . ',';          }          $arg = substr($arg, 0, -1);          eval('$this->$name = new $name(' . $arg . ');');        } else {          $this->$name = new $name();        }        return $this->$name;      }    } elseif (is_object($this->$name)) {      return $this->$name;    }  }}